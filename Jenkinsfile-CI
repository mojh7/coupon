#!groovy
pipeline {
    agent any

    stages {
        stage('build') {
            steps {
                sh 'chmod +x gradlew'
                sh './gradlew clean build --exclude-task test --exclude-task asciidoctor'
                echo 'build success'
            }
        }

        stage('test') {
            steps {
                sh './gradlew test'
                echo 'test success'
            }
        }

        stage('jacoco') {
            steps {
                sh './gradlew jacocoTestReport jacocoTestCoverageVerification'
                echo 'jacoco success'
            }
        }

        stage('sonarqube analysis') {
            steps {
                withSonarQubeEnv('SonarQubeServer') {
                    sh "./gradlew sonarqube \
                    -Dsonar.projectKey=${env.SONAR_PROJECT_KEY} \
                    -Dsonar.host.url=${env.SONAR_HOST_URL} \
                    -Dsonar.login=${env.SONAR_AUTH_TOKEN}"
                    echo 'SonarQube analysis'
                }
                echo 'sonarqube analysis success'
            }
        }

        stage('quality gate') {
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') {
                        qualityGate = waitForQualityGate()

                        if (qualityGate.status != "OK") {
                            echo 'Quality Gate failure'
                            currentBuild.result = "FAILURE"
                        }
                    }
                }
                echo 'quality gate success'
            }
        }
    }

    post {
        success {
            echo 'success'
        }
        failure {
            echo 'failure'
        }
    }
}